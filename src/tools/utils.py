import yaml
import logging
import importlib
from jinja2 import Template
from src.utils import load_config, inject_product_info_into_tool
from src.config import tools_package

# Initialize logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def read_agent_tools_description(model, yaml_file, product_information):
    """
    Read agent tools description from a YAML file and update descriptions based on product information.

    Args:
        model: The language model to process the information.
        yaml_file (str): Path to the YAML file containing agent and tool data.
        product_information (dict): A dictionary containing the product details for updating descriptions.

    Returns:
        dict: A dictionary containing agents and their tools' updated descriptions.
    """
    
    # Load configuration data from the YAML file
    data = load_config(yaml_file)

    # Dictionary to store agents and their tools' descriptions
    agents_tools_information_dict = {}
    for agent in data:
        agent_name = agent['agent_name']
        if agent_name not in agents_tools_information_dict:
            agents_tools_information_dict[agent_name] = {}
        for tool in agent['tools']:
            tool_name = tool['name']
            tool_description = tool['description']
            agents_tools_information_dict[agent_name][tool_name] = tool_description

    # Update tool descriptions for each agent, except for the Greeting agent
    for agent_name, agent_tools_information in agents_tools_information_dict.items():
        if agent_name == 'Greeting':
            continue
        
        for tool_name, original_tool_description in agent_tools_information.items():
            # print("Tool name:", tool_name)
            # print("Original tool description:", original_tool_description)

            # Create a dictionary for the tool info
            tool_info_dict = {
                "name": tool_name,
                "tool_data": original_tool_description
            }
            # Inject product information into the tool description
            updated_tool_description = inject_product_info_into_tool(model, tool_info_dict, product_information, use_case='tool_description')
            # print("Updated tool description:", updated_tool_description)
            # print("------------------------------------------------")

            # Update the tool description in the agents_tools_information_dict
            agents_tools_information_dict[agent_name][tool_name] = updated_tool_description

    return agents_tools_information_dict

def get_agent_tools(agents_tools_information_dict, agents_prompt):
    """
    Get agent tools from the provided tools information dictionary and agent prompts.

    Args:
        agents_tools_information_dict (dict): Dictionary of agents and their tools' descriptions.
        agents_prompt (dict): Dictionary of agent prompts.

    Returns:
        dict: A dictionary containing agent tools.
    """
    agent_tools_dict = {}
    for agent_name, tools in agents_tools_information_dict.items():
        if agent_name not in agent_tools_dict:
            agent_tools_dict[agent_name] = {}
        for tool_name, tool_description in tools.items():
            try:
                # Check if tool is ask_entities, then extract tool_entity_prompt generated by generate_active_agents_prompt()
                if tool_description == 'use_generated_entity_prompt_from_generate_active_agents_prompt()':
                    for key, value in agents_prompt.items():
                        if value['agent_name'] == agent_name:
                            tool_description = value['agent_entity_prompt']
                
                print("\n\n[INFO]: Tool name: ", tool_name)
                tool_function = getattr(importlib.import_module(tools_package), tool_name)
                print("[INFO]: Tool function description: ", tool_function.description)
                tool_function.description = tool_description
                print("[INFO]: Tool function description updated to: ", tool_function.description, "\n\n")
                agent_tools_dict[agent_name][tool_name] = tool_function
            except AttributeError:
                print(f"[ERROR]: Tool function '{tool_name}' not found in tools package.")
    
    return agent_tools_dict
